# doctest_in_help.txt
===============================
 How to Use 0-add_integer.py
===============================

This module is very simple, since it only has one function called
``add_integer``.

Numbers
=======

``add_integer()`` returns the sum of its arguments.  For integers,
that value is equivalent to using the ``+`` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

It also works with floating-point values, but they should be casted to integers

::

	>>> add_integer(2.0, 3)
	5

Since b has a starting value of 98 in the definition, ''add_integer()'' still works
with just a as an integer

::

	>>> add_integer(5)
	103

Non-Numbers
===========

Because we want ``+`` to work only for numbers, it should raise a TypeError
if at least of the values isn't a number

::

	>>> add_integer('a', 3)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

::

	>>> add_integer(4, 'b')
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

::

	>>> add_integer(4, float('inf'))
    Traceback (most recent call last):
      File "/home/romain5014/.pyenv/versions/3.8.5/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[6]>", line 1, in <module>
        add_integer(4, float('inf'))
      File "/home/romain5014/holbertonschool-higher_level_programming/python-test_driven_development/0-add_integer.py", line 19, in add_integer
        return int(a) + int(b)
    OverflowError: cannot convert float infinity to integer
